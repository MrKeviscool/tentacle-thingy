// float *mapRange(void *inmin, void *inmax, int amount){ //DANGEROUS (LOL) //REMEMBER TO FREE MEMORY
//     float *outarr = (float *)malloc(sizeof(float) * amount);
    
//     float min = *(float *)inmin;
//     float max = *(float *)inmax;
//     for(int i = 0; i < amount; i++){
//         outarr[i] = ((max-min)/amount)*i+min;
//     }
//     return outarr;
//     //REMEMBER TO FREE MALOC
// }

// float *mapRange(float min, float max, int amount){ //SO FUCKING SKETCHY  (safer but still shit when i can just pass in a float list)
    // static float *outarr = (float *)malloc(sizeof(float) * amount);
    // for(int i = 0; i < amount; i++){
        // outarr[i] = ((max-min)/amount)*i+min;
    // }
    // return outarr;
    // REMEMBER TO FREE MALOC
// }


failed checks to keep balls together

            // cout << "index: " << y << " amount to move x: " << xmv << " y: " << ymv << endl;
            // if(balls[y].getMid().x+xmv > balls[y+1].shape.getPosition().x + balls[y+1].shape.getRadius() || balls[y].getMid().x+xmv < balls[y+1].shape.getPosition().x
            // || balls[y].getMid().y+ymv > balls[y+1].shape.getPosition().y + balls[y+1].shape.getRadius() || balls[y].getMid().y+ymv < balls[y+1].shape.getPosition().y
            // ){
            //     continue;
            // }
            
            // float distToNext = sqrtf32(sqarf32((balls[y].getMid().x+xmv - balls[y+1].getMid().x)) * sqarf32((balls[y].getMid().y+ymv - balls[y+1].getMid().y)));
            // if(distToNext > balls[y].shape.getRadius()/2){
            //     continue;
            // }
